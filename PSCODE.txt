 1.Student Grade Calculator

START
DISPLAY "enter assignment score(out of 100):"
INPUT assignmentscore
 
DISPLAY "enter assignment exam score(out of 100)"
INPUT midtermscore
 
DISPLAY "enter final exam score(out of 100)"
INPUT finalscore

SET finalgrade=(assignmentscore*0.30)+(midtermscore*0.30)+(finalexamscore*0.40)
IF finalgrade>=60 THEN
 SET status="pass"
ELSE
 SET status="fail"
ENDIF

 DISPLAY"final grade:",finalgrade
 DISPLAY"STATUS:",status
END

2.ATM BANKING SYSTEM

START 
DISPLAY"enter your pin:"
INPUT userpin
IF userpin is incorrect THEN 
DISPLAY "invalid pin try again."
EXIT
ENDIF
SET balance=1000
REPEAT
DISPLAY"ATM menu:"
DISPLAY"1.check balance"
DISPLAY"2.deposit money"
DISPLAY"3.withdraw money"
DISPLAY"4.exit"
DISPLAY"choose an option:"
INPUT choice

IF choice=1 THEN
DISPLAY "your balance is",balance
ELSE IF choice=2 THEN
DISPLAY"enter amount to deposit:"
INPUT depositAmount
  SET balance = balance + depositAmount
  DISPLAY "Deposit successful. New balance: ", balance
  ELSE IF choice = 3 THEN
  DISPLAY "Enter amount to withdraw:"
  INPUT withdrawAmount
  IF withdrawAmount > balance THEN
  DISPLAY "Insufficient funds!"
ELSE
 SET balance = balance - withdrawAmount
DISPLAY "Withdrawal successful. New balance: ", balance
ENDIF
ELSE IF choice = 4 THEN
DISPLAY "Thank you for using our ATM."
EXIT
ELSE
DISPLAY "Invalid choice. Please try again."
 ENDIF
    UNTIL choice = 4
END
 
3. Inventory Management System

START

DECLARE inventory as a list

FUNCTION addProduct(id, name, price, quantity)
    CREATE product as dictionary with keys (id, name, price, quantity)
    ADD product to inventory
    DISPLAY "Product added successfully."

FUNCTION updateProduct(id, new_price, new_quantity)
    FOR each product in inventory
        IF product.id == id THEN
            SET product.price = new_price
            SET product.quantity = new_quantity
            DISPLAY "Product updated successfully."
            RETURN
    DISPLAY "Product not found."

FUNCTION removeProduct(id)
    FOR each product in inventory
        IF product.id == id THEN
            REMOVE product from inventory
            DISPLAY "Product removed successfully."
            RETURN
    DISPLAY "Product not found."

FUNCTION searchProduct(id_or_name)
    FOR each product in inventory
        IF product.id == id_or_name OR product.name == id_or_name THEN
            DISPLAY product details
            RETURN
    DISPLAY "Product not found."

FUNCTION displayInventory()
    IF inventory is empty THEN
        DISPLAY "Inventory is empty."
    ELSE
        FOR each product in inventory
            DISPLAY product details

FUNCTION trackLowStock(threshold)
    FOR each product in inventory
        IF product.quantity < threshold THEN
            DISPLAY "Low stock:", product details

FUNCTION generateReport()
    DISPLAY "Inventory Report:"
    DISPLAY "Total Products:", COUNT(inventory)
    DISPLAY all product details

LOOP
    DISPLAY "1. Add Product"
    DISPLAY "2. Update Product"
    DISPLAY "3. Remove Product"
    DISPLAY "4. Search Product"
    DISPLAY "5. Display Inventory"
    DISPLAY "6. Track Low Stock"
    DISPLAY "7. Generate Report"
    DISPLAY "8. Exit"
    DISPLAY "Enter your choice: "
    INPUT choice

    SWITCH(choice)
        CASE 1: CALL addProduct()
        CASE 2: CALL updateProduct()
        CASE 3: CALL removeProduct()
        CASE 4: CALL searchProduct()
        CASE 5: CALL displayInventory()
        CASE 6: CALL trackLowStock()
        CASE 7: CALL generateReport()
        CASE 8: EXIT program
        DEFAULT: DISPLAY "Invalid choice, try again."

END

4. Prime Number Checker

START

FUNCTION isPrime(number)
    IF number <= 1 THEN
        RETURN false
    IF number is 2 THEN
        RETURN true
    FOR i FROM 2 TO square root of number DO
        IF number MOD i == 0 THEN
            RETURN false
    RETURN true

LOOP
    DISPLAY "Enter a positive integer: "
    INPUT number

    IF number is not a positive integer THEN
        DISPLAY "Invalid input. Please enter a positive integer."
        CONTINUE

    IF isPrime(number) THEN
        DISPLAY number, "is a prime number."
    ELSE
        DISPLAY number, "is not a prime number."

    DISPLAY "Do you want to check another number? (yes/no)"
    INPUT choice
    IF choice is "no" THEN
        EXIT LOOP

END

5. Temperature Conversion Tool

START

FUNCTION convertTemperature(value, sourceUnit, targetUnit)
    IF sourceUnit == "C" AND targetUnit == "F" THEN
        RETURN (value * 9/5) + 32
    ELSE IF sourceUnit == "C" AND targetUnit == "K" THEN
        RETURN value + 273.15
    ELSE IF sourceUnit == "F" AND targetUnit == "C" THEN
        RETURN (value - 32) * 5/9
    ELSE IF sourceUnit == "F" AND targetUnit == "K" THEN
        RETURN (value - 32) * 5/9 + 273.15
    ELSE IF sourceUnit == "K" AND targetUnit == "C" THEN
        RETURN value - 273.15
    ELSE IF sourceUnit == "K" AND targetUnit == "F" THEN
        RETURN (value - 273.15) * 9/5 + 32
    ELSE
        RETURN value  // No conversion needed if units are the same

LOOP
    DISPLAY "Enter temperature value: "
    INPUT value

    DISPLAY "Enter source unit (C, F, K): "
    INPUT sourceUnit

    DISPLAY "Enter target unit (C, F, K): "
    INPUT targetUnit

    convertedValue = convertTemperature(value, sourceUnit, targetUnit)
    DISPLAY "Converted Temperature: ", convertedValue, targetUnit

    DISPLAY "Do you want to convert another temperature? (yes/no)"
    INPUT choice
    IF choice == "no" THEN
        EXIT LOOP

END

6. Library Book Management System


  START

DEFINE Book class:
    Attributes: title, author, ISBN, status (Available/Checked Out)

DEFINE Member class:
    Attributes: name, member_id, borrowed_books (list)

DEFINE Library class:
    Attributes: books (list), members (list)
    
    FUNCTION add_book(title, author, ISBN):
        Create new Book object with status "Available"
        Add to books list

    FUNCTION remove_book(ISBN):
        Find book by ISBN
        IF found THEN remove from books list

    FUNCTION register_member(name, member_id):
        Create new Member object
        Add to members list

    FUNCTION checkout_book(member_id, ISBN):
        Find book and member
        IF book is available THEN
            Change status to "Checked Out"
            Add book to member's borrowed_books list
        ELSE
            DISPLAY "Book not available"

    FUNCTION return_book(member_id, ISBN):
        Find member and book
        IF book is in member's borrowed_books THEN
            Change status to "Available"
            Remove book from member's borrowed_books list
        ELSE
            DISPLAY "Book not checked out"

    FUNCTION search_book(query):
        Search books by title, author, or ISBN
        DISPLAY matching results

    FUNCTION generate_overdue_report():
        CHECK due dates and list overdue books

LOOP
    DISPLAY menu: Add Book, Remove Book, Register Member, Checkout, Return, Search, Overdue Report, Exit
    INPUT choice
    EXECUTE corresponding function based on choice
    IF choice == "Exit" THEN EXIT LOOP

END

7. Fibonacci Sequence Generator


START

FUNCTION generate_fibonacci(n):
    IF n <= 0 THEN
        DISPLAY "Enter a positive integer"
        RETURN
    ELSE IF n == 1 THEN
        RETURN [0]
    ELSE IF n == 2 THEN
        RETURN [0, 1]

    INITIALIZE sequence = [0, 1]
    FOR i FROM 2 TO n-1:
        NEXT_TERM = sequence[i-1] + sequence[i-2]
        APPEND NEXT_TERM to sequence

    RETURN sequence

FUNCTION save_to_file(sequence):
    OPEN "fibonacci.txt" in write mode
    WRITE sequence to file
    CLOSE file

LOOP
    DISPLAY "Enter the number of Fibonacci terms to generate:"
    INPUT n
    VALIDATE n is a positive integer
    CALL generate_fibonacci(n) â†’ result
    DISPLAY result

    DISPLAY "Do you want to save the sequence to a file? (yes/no)"
    INPUT choice
    IF choice == "yes" THEN
        CALL save_to_file(result)
        DISPLAY "Sequence saved successfully"

    DISPLAY "Do you want to generate another sequence? (yes/no)"
    INPUT repeat
    IF repeat == "no" THEN EXIT LOOP

END

8. Calendar Event Scheduler

START
DEFINE event_list as an empty list

FUNCTION add_event(title, date, time, description):
    VALIDATE date and time
    CHECK for conflicts with existing events
    IF no conflict THEN
        APPEND (title, date, time, description) to event_list
        DISPLAY "Event added successfully"
    ELSE
        DISPLAY "Schedule conflict detected"

FUNCTION display_events(filter_type, filter_value):
    IF filter_type is "day/week/month":
        FILTER event_list based on filter_value
    DISPLAY filtered events

FUNCTION search_event(keyword):
    SEARCH event_list for keyword in title or description
    DISPLAY matching events

FUNCTION delete_event(title, date, time):
    FIND event in event_list
    IF event exists THEN
        REMOVE event from event_list
        DISPLAY "Event deleted successfully"
    ELSE
        DISPLAY "Event not found"

FUNCTION modify_event(title, date, time, new_details):
    FIND event in event_list
    IF event exists THEN
        UPDATE event details
        DISPLAY "Event modified successfully"
    ELSE
        DISPLAY "Event not found"

FUNCTION set_reminder(title, date, time, reminder_time):
    VALIDATE reminder_time
    SCHEDULE reminder notification
    DISPLAY "Reminder set"

LOOP
    DISPLAY menu (Add, View, Search, Delete, Modify, Set Reminder, Exit)
    INPUT choice
    PERFORM corresponding function based on choice
    IF choice == "Exit" THEN EXIT LOOP

END

